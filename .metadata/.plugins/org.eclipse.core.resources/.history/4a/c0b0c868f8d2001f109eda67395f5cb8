package com.wipro.Collections.day8;

import java.util.*;

public class CollectionsExample {
    public static void main(String[] args) {
        // List example (ArrayList)
        List<String> list = new ArrayList<>();
        list.add("Apple");
        list.add("Banana");
        list.add("Cherry");
        System.out.println("List: " + list);
        list.remove("Banana");
        System.out.println("After removal: " + list);
        System.out.println("Element at index 0: " + list.get(0));
        System.out.println("List contains 'Apple': " + list.contains("Apple"));
        list.clear();
        System.out.println("List after clear: " + list);

        // Set example (HashSet)
        Set<Integer> set = new HashSet<>();
        set.add(10);
        set.add(20);
        set.add(30);
        set.add(10); // Duplicate, won't be added
        System.out.println("Set: " + set);
        set.remove(20);
        System.out.println("After removal: " + set);
        System.out.println("Contains 30: " + set.contains(30));
        set.clear();
        System.out.println("Set after clear: " + set);

        // Map example (HashMap)
        Map<Integer, String> map = new HashMap<>();
        map.put(1, "One");
        map.put(2, "Two");
        map.put(3, "Three");
        System.out.println("Map: " + map);
        map.remove(2);
        System.out.println("After removal: " + map);
        System.out.println("Value for key 1: " + map.get(1));
        System.out.println("Map contains key 3: " + map.containsKey(3));
        map.clear();
        System.out.println("Map after clear: " + map);

        // Queue example (LinkedList)
        Queue<String> queue = new LinkedList<>();
        queue.add("First");
        queue.add("Second");
        queue.add("Third");
        System.out.println("Queue: " + queue);
        System.out.println("Polled: " + queue.poll()); // Removes and returns the head
        System.out.println("Queue after poll: " + queue);
        System.out.println("Peek: " + queue.peek()); // Returns the head without removing
        queue.clear();
        System.out.println("Queue after clear: " + queue);

        // Stack example (Stack)
        Stack<String> stack = new Stack<>();
        stack.push("Bottom");
        stack.push("Middle");
        stack.push("Top");
        System.out.println("Stack: " + stack);
        System.out.println("Popped: " + stack.pop()); // Removes and returns the top element
        System.out.println("Stack after pop: " + stack);
        System.out.println("Peek: " + stack.peek()); // Returns the top element without removing
        stack.clear();
        System.out.println("Stack after clear: " + stack);

        // Deque example (ArrayDeque)
        Deque<String> deque = new ArrayDeque<>();
        deque.addFirst("Front");
        deque.addLast("Back");
        System.out.println("Deque: " + deque);
        System.out.println("Removed First: " + deque.removeFirst());
        System.out.println("Deque after removeFirst: " + deque);
        System.out.println("Removed Last: " + deque.removeLast());
        deque.clear();
        System.out.println("Deque after clear: " + deque);
    }
}
